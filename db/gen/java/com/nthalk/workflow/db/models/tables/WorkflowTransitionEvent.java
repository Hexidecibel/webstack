/*
 * This file is generated by jOOQ.
 */
package com.nthalk.workflow.db.models.tables;


import com.nthalk.workflow.db.models.DefaultSchema;
import com.nthalk.workflow.db.models.Indexes;
import com.nthalk.workflow.db.models.Keys;
import com.nthalk.workflow.db.models.tables.records.WorkflowTransitionEventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowTransitionEvent extends TableImpl<WorkflowTransitionEventRecord> {

    private static final long serialVersionUID = 258462408;

    /**
     * The reference instance of <code>workflow_transition_event</code>
     */
    public static final WorkflowTransitionEvent WORKFLOW_TRANSITION_EVENT = new WorkflowTransitionEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowTransitionEventRecord> getRecordType() {
        return WorkflowTransitionEventRecord.class;
    }

    /**
     * The column <code>workflow_transition_event.workflow_transition_event_id</code>.
     */
    public final TableField<WorkflowTransitionEventRecord, Integer> WORKFLOW_TRANSITION_EVENT_ID = createField("workflow_transition_event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('workflow_transition_event_workflow_transition_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>workflow_transition_event.workflow_transition_id</code>.
     */
    public final TableField<WorkflowTransitionEventRecord, Integer> WORKFLOW_TRANSITION_ID = createField("workflow_transition_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>workflow_transition_event.instance_key</code>.
     */
    public final TableField<WorkflowTransitionEventRecord, String> INSTANCE_KEY = createField("instance_key", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow_transition_event.transitioned_at</code>.
     */
    public final TableField<WorkflowTransitionEventRecord, Timestamp> TRANSITIONED_AT = createField("transitioned_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>workflow_transition_event.data</code>.
     */
    public final TableField<WorkflowTransitionEventRecord, String> DATA = createField("data", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow_transition_event</code> table reference
     */
    public WorkflowTransitionEvent() {
        this(DSL.name("workflow_transition_event"), null);
    }

    /**
     * Create an aliased <code>workflow_transition_event</code> table reference
     */
    public WorkflowTransitionEvent(String alias) {
        this(DSL.name(alias), WORKFLOW_TRANSITION_EVENT);
    }

    /**
     * Create an aliased <code>workflow_transition_event</code> table reference
     */
    public WorkflowTransitionEvent(Name alias) {
        this(alias, WORKFLOW_TRANSITION_EVENT);
    }

    private WorkflowTransitionEvent(Name alias, Table<WorkflowTransitionEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowTransitionEvent(Name alias, Table<WorkflowTransitionEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WorkflowTransitionEvent(Table<O> child, ForeignKey<O, WorkflowTransitionEventRecord> key) {
        super(child, key, WORKFLOW_TRANSITION_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_TRANSITION_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkflowTransitionEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKFLOW_TRANSITION_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkflowTransitionEventRecord> getPrimaryKey() {
        return Keys.WORKFLOW_TRANSITION_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkflowTransitionEventRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowTransitionEventRecord>>asList(Keys.WORKFLOW_TRANSITION_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WorkflowTransitionEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkflowTransitionEventRecord, ?>>asList(Keys.WORKFLOW_TRANSITION_EVENT__WORKFLOW_TRANSITION_EVENT_WORKFLOW_TRANSITION_ID_FKEY);
    }

    public WorkflowTransition workflowTransition() {
        return new WorkflowTransition(this, Keys.WORKFLOW_TRANSITION_EVENT__WORKFLOW_TRANSITION_EVENT_WORKFLOW_TRANSITION_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkflowTransitionEvent as(String alias) {
        return new WorkflowTransitionEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkflowTransitionEvent as(Name alias) {
        return new WorkflowTransitionEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowTransitionEvent rename(String name) {
        return new WorkflowTransitionEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowTransitionEvent rename(Name name) {
        return new WorkflowTransitionEvent(name, null);
    }
}

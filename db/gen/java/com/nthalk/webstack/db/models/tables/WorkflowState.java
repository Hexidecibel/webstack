/*
 * This file is generated by jOOQ.
 */
package com.nthalk.webstack.db.models.tables;


import com.nthalk.webstack.db.models.DefaultSchema;
import com.nthalk.webstack.db.models.Indexes;
import com.nthalk.webstack.db.models.Keys;
import com.nthalk.webstack.db.models.tables.records.WorkflowStateRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowState extends TableImpl<WorkflowStateRecord> {

    private static final long serialVersionUID = -1068475249;

    /**
     * The reference instance of <code>workflow_state</code>
     */
    public static final WorkflowState WORKFLOW_STATE = new WorkflowState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowStateRecord> getRecordType() {
        return WorkflowStateRecord.class;
    }

    /**
     * The column <code>workflow_state.workflow_state_id</code>.
     */
    public final TableField<WorkflowStateRecord, Integer> WORKFLOW_STATE_ID = createField("workflow_state_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('workflow_state_workflow_state_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>workflow_state.workflow_id</code>.
     */
    public final TableField<WorkflowStateRecord, Integer> WORKFLOW_ID = createField("workflow_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>workflow_state.name</code>.
     */
    public final TableField<WorkflowStateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow_state</code> table reference
     */
    public WorkflowState() {
        this(DSL.name("workflow_state"), null);
    }

    /**
     * Create an aliased <code>workflow_state</code> table reference
     */
    public WorkflowState(String alias) {
        this(DSL.name(alias), WORKFLOW_STATE);
    }

    /**
     * Create an aliased <code>workflow_state</code> table reference
     */
    public WorkflowState(Name alias) {
        this(alias, WORKFLOW_STATE);
    }

    private WorkflowState(Name alias, Table<WorkflowStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowState(Name alias, Table<WorkflowStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WorkflowState(Table<O> child, ForeignKey<O, WorkflowStateRecord> key) {
        super(child, key, WORKFLOW_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkflowStateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKFLOW_STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkflowStateRecord> getPrimaryKey() {
        return Keys.WORKFLOW_STATE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkflowStateRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowStateRecord>>asList(Keys.WORKFLOW_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WorkflowStateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkflowStateRecord, ?>>asList(Keys.WORKFLOW_STATE__WORKFLOW_STATE_WORKFLOW_ID_FKEY);
    }

    public Workflow workflow() {
        return new Workflow(this, Keys.WORKFLOW_STATE__WORKFLOW_STATE_WORKFLOW_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkflowState as(String alias) {
        return new WorkflowState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkflowState as(Name alias) {
        return new WorkflowState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowState rename(String name) {
        return new WorkflowState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowState rename(Name name) {
        return new WorkflowState(name, null);
    }
}
